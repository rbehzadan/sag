name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    name: Build ${{ matrix.name }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: linux-amd64
            target: x86_64-unknown-linux-gnu
            cross: false

          - name: linux-amd64-musl
            target: x86_64-unknown-linux-musl
            cross: false
            
          - name: linux-arm64
            target: aarch64-unknown-linux-gnu
            cross: true
            
          - name: linux-arm64-musl
            target: aarch64-unknown-linux-musl
            cross: true
            
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
          profile: minimal

      - name: Install MUSL toolchain for x86_64
        if: matrix.name == 'linux-amd64-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Install dependencies for ARM Linux builds
        if: matrix.name == 'linux-arm64' || matrix.name == 'linux-arm64-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            gcc-aarch64-linux-gnu libc6-dev-arm64-cross
      
      - name: Install cross
        if: matrix.cross
        uses: taiki-e/install-action@v2
        with:
          tool: cross
      
      - name: Build with Cargo (native)
        if: "!matrix.cross"
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
          
      - name: Build with Cross (cross-compilation)
        if: matrix.cross
        run: cross build --release --target ${{ matrix.target }}
        
      - name: Prepare artifact name
        id: prepare-artifact
        shell: bash
        run: |
          # Get the package name directly from Cargo.toml
          PACKAGE_NAME=$(grep -m 1 '^name\s*=\s*"' Cargo.toml | sed 's/^name\s*=\s*"\(.*\)"/\1/')
          
          # If package name extraction fails, fall back to directory name
          if [ -z "$PACKAGE_NAME" ]; then
            PACKAGE_NAME=$(basename $(pwd))
            echo "Warning: Could not determine package name from Cargo.toml, using directory name: $PACKAGE_NAME"
          fi
          
          echo "BINARY_NAME=${PACKAGE_NAME}" >> $GITHUB_ENV
          
          # Create artifact name with version tag
          VERSION=${GITHUB_REF#refs/tags/}
          echo "ARTIFACT_NAME=${PACKAGE_NAME}-${VERSION}-${{ matrix.name }}" >> $GITHUB_ENV
          
          echo "Package: ${PACKAGE_NAME}"
          echo "Artifact: ${PACKAGE_NAME}-${VERSION}-${{ matrix.name }}"
      
      - name: Create distribution directory
        shell: bash
        run: |
          mkdir -p dist
          cp "target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}" dist/
      
      - name: Create archive
        shell: bash
        run: |
          cd dist
          tar -czvf "../${{ env.ARTIFACT_NAME }}.tar.gz" ./*
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_NAME }}.tar.gz
          retention-days: 3
          
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          
      - name: List artifacts
        run: find ./artifacts -type f | sort
          
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: ./artifacts/**/*
          draft: false
          prerelease: false
          generate_release_notes: true

